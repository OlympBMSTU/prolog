{"version":3,"sources":["DirectorSettings.js","CustomField.js","OlimpSettingsList.js","api/api.js","App.js","serviceWorker.js","index.js"],"names":["DirectorSettings","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getData","state","specified","data","objectSpread","error","f","i","o","work","position","getTextField","label","name","required","arguments","length","undefined","react_default","a","createElement","TextField_default","showError","fullWidth","value","onChange","event","setState","defineProperty","target","degree","prevProps","prevState","snapshot","is","_this2","Typography_Typography_default","variant","color","style","padding","field","title","display","alignItems","Switch_default","checked","Collapse_Collapse_default","in","noValidate","autoComplete","paddingLeft","paddingBottom","Divider_default","Component","defaultProps","CustomField","theme","margin","marginTop","concat","OlimpSettingsSubList","check","next","subRefs","map","k","isError","selected","fieldsData","values","includes","sel","s","clear","filter","r","forEach","onSelectionChanged","clearSublist","subList","renderFields","fields","settingsListRef","assertThisInitialized","args","newData","key","type","src_CustomField","src_DirectorSettings","getContent","children","child","push","nextProps","nextState","nextContext","sublistProps","depth","topList","listRef","Paper_default","marginLeft","backgroundColor","List_default","subheader","ListSubheader_default","disableSticky","subhint","elem","index","core_ListItem_default","dense","button","onClick","multiSelect","toConsumableArray","Checkbox_default","Radio_default","core_ListItemText_default","primary","text","secondary","hint","inset","secondaryTypographyProps","component","whiteSpace","Collapse_default","mountOnEnter","assign","ref","indexes","childID","nextChildProps","help","instruction","fullname","OlimpSettingsList","_this3","_this4","Button_default","OlimpSettingsList_OlimpSettingsSubList","id","multiselect","clearFunc","api","API","host","method","httpMethod","params","url","httpRequest","credentials","headers","Content-type","Access-Control-Request-Method","mode","body","JSON","stringify","fetch","then","response","json","App","onDataLoaded","selectedDirections","entries","entry","direction","renderDirectionsList","ListItem_default","tabIndex","disableRipple","ListItemText_default","renderDirectionsSettings","Typography_default","verticalAlign","nextStep","step","src_OlimpSettingsList","olimpSettingsList","renderLoading","flex","width","justifyContent","flexDirection","submitData","ans","olimp","directionName","baseChildren","translateData","server","n","submitLoading","requestData","resp","window","location","href","res_code","catch","reason","console","log","app","flexFlow","minHeight","AppBar_default","Toolbar_default","noWrap","Stepper_default","activeStep","orientation","Step_default","StepLabel_default","StepContent_default","disabled","Popper_default","anchorEl","readyButton","open","transition","_ref","TransitionProps","Fade_default","timeout","Paper_Paper_default","buttonRef","keys","d","list","Boolean","hostname","match","__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8qBASMA,eAQF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAeVQ,QAAU,WACN,OAAKP,EAAKQ,MAAMC,UAKT,CACHC,KAAKT,OAAAU,EAAA,EAAAV,CAAA,GAAKD,EAAKQ,OAAQI,MACG,KAAtBZ,EAAKQ,MAAME,KAAKG,GACM,KAAtBb,EAAKQ,MAAME,KAAKI,GACM,KAAtBd,EAAKQ,MAAME,KAAKK,GACS,KAAzBf,EAAKQ,MAAME,KAAKM,MACa,KAA7BhB,EAAKQ,MAAME,KAAKO,UAVb,CACHP,KAAM,CAACD,WAAW,GAAQG,OAAO,IAnB1BZ,EAiCnBkB,aAAe,SAACC,EAAOC,GAA0B,IAApBC,IAAoBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAC7C,OACIG,EAAAC,EAAAC,cAACC,GAAAF,EAAD,CACId,MAAOZ,EAAKD,MAAM8B,WAAuC,KAA1B7B,EAAKQ,MAAME,KAAKU,IAAgBC,EAC/DS,WAAS,EACTX,MAAOA,EACPY,MAAO/B,EAAKQ,MAAME,KAAKU,GACvBY,SAAU,SAAAC,GACNjC,EAAKkC,SAAS,CACVxB,KAAKT,OAAAU,EAAA,EAAAV,CAAA,GAAKD,EAAKQ,MAAME,KAAjBT,OAAAkC,EAAA,EAAAlC,CAAA,GAAwBmB,EAAOa,EAAMG,OAAOL,cAxChE/B,EAAKQ,MAAQ,CACTC,WAAW,EACXC,KAAM,CACFG,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,KAAM,GACNqB,OAAQ,GACRpB,SAAU,KAGlBjB,EAAKD,MAAMiC,SAAShC,EAAKO,WAbVP,kFANAsC,EAAWC,EAAWC,GAChCvC,OAAOwC,GAAGtC,KAAKK,MAAME,KAAM6B,EAAU7B,OAASP,KAAKK,MAAMC,YAAc8B,EAAU9B,WAClFN,KAAKJ,MAAMiC,SAAS7B,KAAKI,6DAqDxB,IAAAmC,EAAAvC,KACL,OACIsB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgB,GAAAjB,EAAD,CAAYkB,QAAS,YAAaC,MAAO,UAAWC,MAAO,CAACC,QAAS,KAChE5C,KAAKJ,MAAMiD,MAAMC,OAEtBxB,EAAAC,EAAAC,cAAA,OAAKmB,MAAO,CACRI,QAAS,OACTC,WAAY,WAEZ1B,EAAAC,EAAAC,cAACyB,GAAA1B,EAAD,CACI2B,QAASlD,KAAKK,MAAMC,UACpBuB,SAAU,SAAAC,GACNS,EAAKR,SAAS,CACVzB,UAAWwB,EAAMG,OAAOiB,WAGhCR,MAAM,YAEVpB,EAAAC,EAAAC,cAACgB,GAAAjB,EAAD,CAAYkB,QAAS,aAArB,+KAIJnB,EAAAC,EAAAC,cAAC2B,GAAA5B,EAAD,CAAU6B,GAAIpD,KAAKK,MAAMC,WACrBgB,EAAAC,EAAAC,cAAA,QAAM6B,YAAU,EAACC,aAAa,MAAMX,MAAO,CAACY,YAAa,GAAIC,cAAe,KACvExD,KAAKe,aAAa,8CAAY,KAC9Bf,KAAKe,aAAa,sBAAQ,KAC1Bf,KAAKe,aAAa,oDAAa,KAC/Bf,KAAKe,aAAa,uEAAiB,QACnCf,KAAKe,aAAa,kFAAkB,UAAU,GAC9Cf,KAAKe,aAAa,0DAAc,cAGzCO,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,cA1FemC,aAgG/B/D,GAAiBgE,aAAe,CAC5BjC,WAAW,GASA/B,UC5GTiE,eAQF,SAAAA,EAAYhE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4D,IACf/D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8D,GAAAzD,KAAAH,KAAMJ,KAOVQ,QAAU,WACN,MAAO,CAACG,KAAM,CAACA,KAAMV,EAAKQ,OAAQI,MAA4B,KAArBZ,EAAKQ,MAAMwD,QAPpDhE,EAAKQ,MAAQ,CACTwD,MAAO,IAEXhE,EAAKD,MAAMiC,SAAShC,EAAKO,WALVP,kFANAsC,EAAWC,EAAWC,GACjCD,EAAUyB,QAAU7D,KAAKK,MAAMwD,OAC/B7D,KAAKJ,MAAMiC,SAAS7B,KAAKI,6DAgBxB,IAAAmC,EAAAvC,KACL,OACIsB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgB,GAAAjB,EAAD,CAAYkB,QAAS,YAAaC,MAAO,UAAWC,MAAO,CAACC,QAAS,KAChE5C,KAAKJ,MAAMiD,MAAMC,OAEtBxB,EAAAC,EAAAC,cAACC,GAAAF,EAAD,CACIoB,MAAO,CACHmB,OAAQ,GACRC,UAAW,GAEftD,MAAOT,KAAKJ,MAAM8B,WAAkC,KAArB1B,KAAKK,MAAMwD,MAC1ClC,WAAS,EACTX,MAAK,GAAAgD,OAAKhE,KAAKJ,MAAMiD,MAAMC,MAAtB,KACLlB,MAAO5B,KAAKK,MAAMwD,MAClBhC,SAAU,SAAAC,GACNS,EAAKR,SAAS,CACV8B,MAAO/B,EAAMG,OAAOL,WAIhCN,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,cAzCUmC,aA+C1BE,GAAYD,aAAe,CACvBjC,WAAW,GASAkC,UC/CTK,eAOF,SAAAA,EAAYrE,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiE,IACfpE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmE,GAAA9D,KAAAH,KAAMJ,KAkBVsE,MAAQ,WACJ,OAAOpE,OAAAU,EAAA,EAAAV,CAAA,GACAD,EAAKQ,MADZ,CACmB8D,KAAMtE,EAAKuE,QAAQC,IAAI,SAAAC,GAClC,OAAIA,EACOA,EAAEJ,QACN,UAxBArE,EA6BnB0E,QAAU,WACN,OACmC,IAA/B1E,EAAKQ,MAAMmE,SAASpD,QACnBvB,EAAKQ,MAAMoE,YAAc3E,OAAO4E,OAAO7E,EAAKQ,MAAMoE,YAAYE,SAAS,OACxE9E,EAAKQ,MAAMmE,SAASH,IAAI,SAAAO,GACxB,IAAIC,EAAIhF,EAAKuE,QAAQQ,GACrB,QAAIC,GACOA,EAAEN,YAEdI,UAAS,IAtCG9E,EAyCnBiF,MAAQ,WACJjF,EAAKkC,SAAS,CACVyC,SAAU,KAEd3E,EAAKuE,QAAQW,OAAO,SAAAC,GAAC,QAAMA,IAAGC,QAAQ,SAACD,GAAD,OAAOA,EAAEF,UAC/CjF,EAAKD,MAAMsF,sBA9CIrF,EAiDnBsF,aAAe,SAACxE,GACZ,IAAIyE,EAAUvF,EAAKuE,QAAQzD,GACvByE,GACAA,EAAQN,SApDGjF,EAuDnBwF,aAAe,WACX,IAAKxF,EAAKD,MAAM0F,OACZ,OAAO,KAEX,IAAIC,EAAezF,OAAA0F,EAAA,EAAA1F,QAAA0F,EAAA,EAAA1F,CAAAD,IAEnB,OAAOA,EAAKD,MAAM0F,OAAOjB,IAAI,SAAAxB,GAEzB,IAAI4C,EAAO,CACP5C,MAAOA,EACPhB,SAAU,SAACtB,GACP,IAAImF,EAAUnF,EAAKE,MAAQ,KAAOF,EAAKA,KACvCgF,EAAgBxD,SAAS,CACrB0C,WAAW3E,OAAAU,EAAA,EAAAV,CAAA,GAAKyF,EAAgBlF,MAAMoE,WAA5B3E,OAAAkC,EAAA,EAAAlC,CAAA,GAAyC+C,EAAM5B,KAAOyE,MAEpEH,EAAgB3F,MAAMsF,sBAE1BxD,UAAW6D,EAAgB3F,MAAM8B,UACjCiE,IAAK9C,EAAM5B,MAaf,OAXiB,WACb,OAAQ4B,EAAM+C,MACV,IAAK,QACD,OAAOtE,EAAAC,EAAAC,cAACqE,GAAgBJ,GAC5B,IAAK,WACD,OAAOnE,EAAAC,EAAAC,cAACsE,GAAqBL,GACjC,QACI,OAAO,MAIZM,MApFX,IAAItB,EAAa,KAFF,OAGX5E,EAAKD,MAAM0F,SACXb,EAAa,GACb5E,EAAKD,MAAM0F,OAAOL,QAAQ,SAAApC,GACtB4B,EAAW5B,EAAM5B,MAAQ,QAGjCpB,EAAKQ,MAAQ,CACTmE,SAAU,GACVC,WAAYA,GAEhB5E,EAAKuE,QAAU,GACfvE,EAAKD,MAAMoG,SAASf,QAAQ,SAAAgB,GACxBpG,EAAKuE,QAAQ8B,KAAK,QAfPrG,qFALGsG,EAAWC,EAAWC,GACxC,OAASvG,OAAOwC,GAAGtC,KAAKK,MAAMmE,SAAU4B,EAAU5B,WAC9CxE,KAAKJ,MAAM8B,YAAcyE,EAAUzE,4DA6FlC,IAAAa,EAAAvC,KACDsG,EAAe,CACfC,MAAOvG,KAAKJ,MAAM2G,MAAQ,EAC1BrB,mBAAoBlF,KAAKJ,MAAMsF,mBAC/BxD,UAAW1B,KAAKJ,MAAM8B,UACtB8E,QAASxG,KAAKJ,MAAM4G,SAGpB9E,EAAY1B,KAAKJ,MAAM8B,WAA4C,IAA/B1B,KAAKK,MAAMmE,SAASpD,OAExDqF,EAAUzG,KAEd,OACIsB,EAAAC,EAAAC,cAACkF,EAAAnF,EAAD,CACIoB,MAAO,CACHgE,WAAY,EACZC,gBAAiBlF,EAAY,UAAY,SAE7CJ,EAAAC,EAAAC,cAACqF,EAAAtF,EAAD,CACIuF,UACIxF,EAAAC,EAAAC,cAACuF,EAAAxF,EAAD,CACIyF,eAAa,GAEZhH,KAAKJ,MAAMqH,QAAUjH,KAAKJ,MAAMqH,QAAU,KAC1CjH,KAAKqF,iBAIbrF,KAAKJ,MAAMoG,SAAS3B,IAAI,SAAC6C,EAAMC,GAC5B,IAAI3C,EAAWjC,EAAKlC,MAAMmE,SAASG,SAASwC,GAiC5C,OACI7F,EAAAC,EAAAC,cAAA,OAAKmE,IAAKwB,GACN7F,EAAAC,EAAAC,cAAC4F,EAAA7F,EAAD,CAAU8F,OAAK,EACLC,QAAM,EACNC,QAAS,WAlCnBd,EAAQ7G,MAAM4H,YACVf,EAAQpG,MAAMmE,SAASG,SAASwC,IAChCV,EAAQtB,aAAagC,GACrBV,EAAQ1E,SAAS,CACbyC,SAAUiC,EAAQpG,MAAMmE,SAASO,OAAO,SAAApE,GAAC,OAAIA,IAAMwG,OAIvDV,EAAQ1E,SAAS,CACbyC,SAAS1E,OAAA2H,EAAA,EAAA3H,CAAK2G,EAAQpG,MAAMmE,UAApBR,OAAA,CAA8BmD,MAK1CV,EAAQpG,MAAMmE,SAAS,KAAO2C,GAC9BV,EAAQtB,aAAagC,GACrBV,EAAQ1E,SAAS,CACbyC,SAAU,MAIdiC,EAAQ1E,SAAS,CACbyC,SAAU,CAAC2C,KAKvB5E,EAAK3C,MAAMsF,uBAWF3C,EAAK3C,MAAM4H,YACRlG,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CAAU2B,QAASsB,IACnBlD,EAAAC,EAAAC,cAACmG,EAAApG,EAAD,CAAO2B,QAASsB,IAEpBlD,EAAAC,EAAAC,cAACoG,EAAArG,EAAD,CAAcsG,QAASX,EAAKY,KACdC,UAAWb,EAAKc,KAChBC,OAAK,EACLC,yBAA0B,CACtBC,UAAW,MACXxF,MAAO,CACHyF,WAAY,gBAItC9G,EAAAC,EAAAC,cAAC6G,EAAA9G,EAAD,CAAU6B,GAAIoB,EAAU8D,cAAY,GAC/BpB,EAAKlB,SACF1E,EAAAC,EAAAC,cAACyC,EAADnE,OAAAyI,OAAA,GACQjC,EADR,CAEIkC,IAAK,SAACxD,GACFzC,EAAK6B,QAAQ+C,GAASnC,GAE1BiC,QAASC,EAAKD,QACd3B,OAAQ4B,EAAK5B,OACbkC,YAAaN,EAAKM,YAClBiB,QAAO3I,OAAA2H,EAAA,EAAA3H,CAAMyC,EAAK3C,MAAM6I,SAAjBzE,OAAA,CAA0B,CAC7BmD,MAAOA,EACP1C,WAAYlC,EAAKlC,MAAMoE,cAE3BuB,SAAUkB,EAAKlB,SAAS3B,IAAI,SAAC4B,EAAOyC,GAChC,IAAIC,EAAiB,CACjBnB,YAAavB,EAAMuB,YACnBM,KAAM7B,EAAMnD,MACZkF,KAAM/B,EAAM+B,KAAO/B,EAAM+B,KAAKY,KAAO,KACrC3B,QAAShB,EAAM+B,KAAO/B,EAAM+B,KAAKa,YAAc,KAC/CvD,OAAQW,EAAMX,QAElB,OAAIW,EAAMD,SACClG,OAAAU,EAAA,EAAAV,CAAA,GACA6I,EADP,CAEI3C,SAAUC,EAAMD,WAGjB,CACH8B,KAAI,GAAA9D,OAAKiC,EAAMhF,KAAX,OAAA+C,OAAqBiC,EAAM6C,gBAGzC,kBArNPpF,aAiO7BqF,eAEF,SAAAA,EAAYnJ,GAAO,IAAAoJ,EAAA,OAAAlJ,OAAAC,EAAA,EAAAD,CAAAE,KAAA+I,IACfC,EAAAlJ,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiJ,GAAA5I,KAAAH,KAAMJ,KAIVkF,MAAQ,WACJkE,EAAKvC,QAAQ3B,QACTkE,EAAKpJ,MAAMsF,oBACX8D,EAAKpJ,MAAMsF,sBARA8D,EAWnB9E,MAAQ,WACJ,OAAO8E,EAAKvC,QAAQvC,SAZL8E,EAenBzE,QAAU,WACN,OAAOyE,EAAKvC,QAAQlC,WAdpByE,EAAKhD,SAAWgD,EAAKpJ,MAAMoG,SAFZgD,wEAmBV,IAAAC,EAAAjJ,KACL,OACIsB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgB,GAAAjB,EAAD,CAAYkB,QAAS,YAAaC,MAAO,UAAWC,MAAO,CAACC,QAAS,KAChE5C,KAAKJ,MAAMiJ,aAEhBvH,EAAAC,EAAAC,cAAC0H,EAAA3H,EAAD,CAAQmB,MAAO,UAAWD,QAAS,YAAa8E,QAAS,kBAAM0B,EAAKnE,SAASnC,MAAO,CAChFmB,OAAQ,IADZ,mFAKAxC,EAAAC,EAAAC,cAAC2H,GAAD,CACIX,IAAK,SAAAxD,GAAC,OAAIiE,EAAKxC,QAAUzB,GACzBgB,SAAUhG,KAAKJ,MAAMoG,SAAS3B,IAAI,SAAC4B,EAAOmD,GACtC,MAAO,CACHpD,SAAUC,EAAMD,SAChBV,OAAQW,EAAMX,OACdwC,KAAM7B,EAAMnD,MACZ0E,YAAavB,EAAMoD,YACnBrB,KAAM/B,EAAM+B,KAAO/B,EAAM+B,KAAKY,KAAO,KACrC3B,QAAShB,EAAM+B,KAAO/B,EAAM+B,KAAKa,YAAc,QAGvDrC,QAASxG,KACTkF,mBAAoB,kBAAM+D,EAAKrJ,MAAMsF,sBACrCuD,QAAS,GACTa,UAAWtJ,KAAK8E,MAChBpD,UAAW1B,KAAKJ,MAAM8B,UACtB6E,MAAO,YAjDK7C,aAwDhCqF,GAAkBpF,aAAe,CAC7B6D,aAAa,GAUFuB,uEChRAQ,GAAA,eAnCX,SAAAC,IAAe1J,OAAAC,EAAA,EAAAD,CAAAE,KAAAwJ,GACXxJ,KAAKyJ,KAAO,8FAGJC,EAAQC,EAAYC,GAE5B,IAAMC,EAAM7J,KAAKyJ,KAAO,IAAMC,EACxBI,EAAc,CAChBC,YAAa,UACbL,OAAQC,EACRK,QAAS,CACLC,eAAgB,mBAChBC,gCAAiCP,GAErCQ,KAAM,OACNC,KAAM,MAOV,MAJkB,SAAfT,GAA2C,qBAAXC,IAC/BE,EAAYM,KAAOC,KAAKC,UAAUV,IAG/BW,MAAMV,EAAKC,GAAaU,KAC3B,SAASC,GAEL,OADAA,EAAWA,EAASC,QAGxB,SAASD,GACL,OAAOA,cC2TRE,eAnUX,SAAAA,EAAY/K,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2K,IACf9K,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6K,GAAAxK,KAAAH,KAAMJ,KAkCVgL,aAAe,SAACrK,GAEZ,IAAIsK,EAAqB,GAEzB/K,OAAOgL,QAAQvK,EAAKyF,UAAU3B,IAAI,SAAA0G,GAAK,OAAIA,EAAM,KAAI9F,QAAQ,SAAA+F,GACzDH,EAAmBG,EAAUlI,QAAS,IAG1CjD,EAAKkC,SAAS,CACV8I,mBAAoBA,EACpBtK,KAAMA,KA7CKV,EAiDnBoL,qBAAuB,WACnB,OACI3J,EAAAC,EAAAC,cAACqF,EAAAtF,EAAD,KACKzB,OACIgL,QAAQjL,EAAKQ,MAAME,KAAKyF,UACxB3B,IAAI,SAAA0G,GAAK,OAAIA,EAAM,KACnB1G,IAAI,SAAC2G,GACF,OACI1J,EAAAC,EAAAC,cAAC0J,EAAA3J,EAAD,CAAU8F,OAAK,EAACC,QAAM,EAAC3B,IAAKqF,EAAUlI,MAAOyE,QAAS,WAClD1H,EAAKkC,SAAS,CACN8I,mBAAmB/K,OAAAU,EAAA,EAAAV,CAAA,GACZD,EAAKQ,MAAMwK,mBADA/K,OAAAkC,EAAA,EAAAlC,CAAA,GAEbkL,EAAUlI,OAASjD,EAAKQ,MAAMwK,mBAAmBG,EAAUlI,aAKxExB,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACI2B,QAASrD,EAAKQ,MAAMwK,mBAAmBG,EAAUlI,OACjDqI,UAAW,EACXC,eAAa,IAEjB9J,EAAAC,EAAAC,cAAC6J,EAAA9J,EAAD,CAAcsG,QAASmD,EAAUlI,MACnBmF,OAAK,EACLF,UAAWiD,EAAUhD,KAAKY,KAC1BV,yBAA0B,CACtBC,UAAW,MACXxF,MAAO,CACHyF,WAAY,oBA7E3CvI,EAuFnByL,yBAA2B,WAQvB,OAPiBzL,EAAKQ,MAAME,KAAKyF,SAAS3B,IAAI,SAAA2G,GAC1C,OAAInL,EAAKQ,MAAMwK,mBAAmBG,EAAUlI,OACjCkI,EAEJ,OACRjG,OAAO,SAAAiG,GAAS,OAAiB,MAAbA,IAEL3G,IAAI,SAAA2G,GAClB,OACI1J,EAAAC,EAAAC,cAAA,OAAKmE,IAAKqF,EAAUlI,MAAOH,MAAO,CAACoB,UAAW,KAC1CzC,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,MACAD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+J,EAAAhK,EAAD,CAAYkB,QAAS,KAAMC,MAAO,UACtBC,MAAO,CAACI,QAAS,eAAgBe,OAAQ,GAAI0H,cAAe,WACnER,EAAUlI,OAEfxB,EAAAC,EAAAC,cAAC0H,EAAA3H,EAAD,CAAQmB,MAAO,YAAaD,QAAS,WAC7BE,MAAO,CAACI,QAAS,eAAgBe,OAAQ,GAAI0H,cAAe,UAC5DjE,QAAS,WACL,IAAIkE,EAAW,EAG8B,IAFzC3L,OACC4E,OAAO7E,EAAKQ,MAAMwK,oBAClB9F,OAAO,SAAAP,GAAQ,OAAIA,IAAUpD,SAC9BqK,EAAW,GAEf5L,EAAKkC,SAAS,CACN8I,mBAAmB/K,OAAAU,EAAA,EAAAV,CAAA,GACZD,EAAKQ,MAAMwK,mBADA/K,OAAAkC,EAAA,EAAAlC,CAAA,GAEbkL,EAAUlI,OAASjD,EAAKQ,MAAMwK,mBAAmBG,EAAUlI,SAEhE4I,KAAMD,EACN/J,WAAW,MAf/B,2KAwB2B,IAA9BsJ,EAAUhF,SAAS5E,QACpBE,EAAAC,EAAAC,cAACmK,GAAD,CACInD,IAAK,SAAA7H,GACDd,EAAK+L,kBAAkBZ,EAAUlI,OAASnC,GAE9CkI,YAAamC,EAAUhD,KAAKa,YAC5B7C,SAAUgF,EAAUhF,SACpBtE,UAAW7B,EAAKQ,MAAMqB,UACtBwD,mBAAoB,WACZrF,EAAKQ,MAAMqB,WACX7B,EAAKkC,SAAS,CACVL,WAAW,WA3IxB7B,EAqJnBgM,cAAgB,WACZ,OACIvK,EAAAC,EAAAC,cAAA,OAAKmB,MAAO,CACR7B,SAAU,WACVgL,KAAM,WACN/I,QAAS,OACTgJ,MAAO,OACPC,eAAgB,SAChBhJ,WAAY,SACZiJ,cAAe,WAEf3K,EAAAC,EAAAC,cAAC+J,EAAAhK,EAAD,CAAYkB,QAAS,MAArB,yDAhKO5C,EAuKnBqM,WAAa,SAAC3L,GACV,IAkBI4L,EAAM5L,EAAK8D,IAAI,SAAA+H,GACf,IAAIC,EAAgBD,EAAMA,MACtBE,EAAezM,EAAKQ,MAAME,KAAKyF,SAASjB,OAAO,SAAAkB,GAAK,OAAIA,EAAMnD,QAAUuJ,IAAe,GAC3F,OAAqC,IAAjCC,EAAatG,SAAS5E,OACf,CAACgL,MAAOC,EAAe9L,KAAM,IAEjC,CAAC6L,MAAOC,EAAe9L,KAxBd,SAAhBgM,EAAiBhM,EAAMiM,GACvB,MAAO,CACH/H,WAAYlE,EAAKkE,WAEjBN,KAAM5D,EAAK4D,KAAKE,IAAI,SAACoI,EAAGrD,GACpB,OAAS,MAALqD,EACO,KACJ,CAACrD,GAAIA,EAAI7I,KAAMgM,EAAcE,EAAGD,EAAOxG,SAASoD,OACxDrE,OAAO,SAAA0H,GAAC,OAAS,MAALA,IAEfjI,SAAUgI,EAAOxG,SAAS3B,IAAI,SAAC4B,EAAOmD,GAClC,OAAI7I,EAAKiE,SAASG,SAASyE,GAChBnD,EAAMnD,OAASmD,EAAMmD,GACzB,OACRrE,OAAO,SAAAkB,GAAK,OAAa,MAATA,KAUasG,CAAcH,EAAM7L,KAAM+L,MAGlEzM,EAAKkC,SAAS,CACV2K,eAAe,IAGnB7M,EAAK0J,IAAIoD,YAAY,SAAU,OAAQR,GAClC3B,KAAK,SAACoC,GACHC,OAAOC,SAASC,KAAhB,gDAAA/I,OAAuE4I,EAAKI,YAE/EC,MAAM,SAACxM,GACJZ,EAAKkC,SAAS,CACV2K,eAAe,OA1M3B7M,EAAK0J,IAAMA,GACX1J,EAAKQ,MAAQ,CACTE,KAAM,KACNsK,mBAAoB,KACpBa,KAAM,EAENhK,WAAW,EAEXgL,eAAe,GAEnB7M,EAAK+L,kBAAoB,GAMzBrB,MAAM,gBACDC,KAAK,SAACjK,GACH,OAAOA,EAAKmK,SAEfF,KAAK,SAACE,GAAD,OAAU7K,EAAK+K,aAAaF,EAAI,OAAW,MAChDuC,MAAO,SAAAC,GACJC,QAAQC,IAAIF,KAzBLrN,wEAkNV,IAAA0C,EAAAvC,KACDqN,EAAMrN,KACV,OACIsB,EAAAC,EAAAC,cAAA,OAAKmB,MAAO,CACRI,QAAS,OACTuK,SAAU,SACVC,UAAW,QACXxB,MAAO,SAEPzK,EAAAC,EAAAC,cAACgM,EAAAjM,EAAD,CAAQT,SAAS,UACbQ,EAAAC,EAAAC,cAACiM,EAAAlM,EAAD,KACID,EAAAC,EAAAC,cAAC+J,EAAAhK,EAAD,CAAYkB,QAAS,KAAMC,MAAM,UAAUgL,QAAM,GAAjD,6GAKY,MAAnB1N,KAAKK,MAAME,KAAeP,KAAK6L,gBAC5BvK,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+J,EAAAhK,EAAD,CAAYkB,QAAS,KAAMC,MAAO,UAAWC,MAAO,CAACC,QAAS,GAAIY,cAAe,IAC5ExD,KAAKK,MAAME,KAAKuC,OAErBxB,EAAAC,EAAAC,cAACmM,EAAApM,EAAD,CAASqM,WAAY5N,KAAKK,MAAMqL,KAAMmC,YAAY,YAC9CvM,EAAAC,EAAAC,cAACsM,EAAAvM,EAAD,KACID,EAAAC,EAAAC,cAACuM,EAAAxM,EAAD,4HACAD,EAAAC,EAAAC,cAACwM,EAAAzM,EAAD,KACKvB,KAAKiL,uBACN3J,EAAAC,EAAAC,cAAC0H,EAAA3H,EAAD,CACImB,MAAO,UACPD,QAAS,WACTE,MAAO,CAACgE,WAAY,IACpBY,QAAS,WACLhF,EAAKR,SAAS,CAAC2J,KAAM,KAEzBuC,UACKnO,OAAO4E,OAAO1E,KAAKK,MAAMwK,oBAAoBlG,UAAS,IAR/D,oCAeRrD,EAAAC,EAAAC,cAACsM,EAAAvM,EAAD,KACID,EAAAC,EAAAC,cAACuM,EAAAxM,EAAD,oGACAD,EAAAC,EAAAC,cAACwM,EAAAzM,EAAD,KACID,EAAAC,EAAAC,cAAC0H,EAAA3H,EAAD,CACImB,MAAO,UACPD,QAAS,WACTE,MAAO,CAACmB,OAAQ,GAChByD,QAAS,WACLhF,EAAKR,SAAS,CAAC2J,KAAM,EAAGhK,WAAW,MAL3C,uLAUAJ,EAAAC,EAAAC,cAAC0M,GAAA3M,EAAD,CAAQ4M,SAAUnO,KAAKoO,YACfC,KAAMrO,KAAKK,MAAMqB,UACjB4M,YAAU,GACb,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,gBAAF,OACGlN,EAAAC,EAAAC,cAACiN,GAAAlN,EAADzB,OAAAyI,OAAA,GAAUiG,EAAV,CAA2BE,QAAS,MAChCpN,EAAAC,EAAAC,cAACmN,GAAApN,EAAD,CAAOoB,MAAO,CAACiE,gBAAiB,UAAWhE,QAAS,KAChDtB,EAAAC,EAAAC,cAAC+J,EAAAhK,EAAD,6KAOfvB,KAAKsL,2BACNhK,EAAAC,EAAAC,cAAA,OACImB,MAAO,CAACmB,OAAQ,EAAGC,UAAW,KAC9BzC,EAAAC,EAAAC,cAAC0H,EAAA3H,EAAD,CACI0M,SAAUjO,KAAKK,MAAMqM,cACrBhK,MAAO,UACPD,QAAS,YACTd,WAAS,EACTiN,UAAW,SAAC5J,GACRzC,EAAK6L,YAAcpJ,GAEvBuC,QAAS,WACL,IAAI4E,EAAMrM,OAAO+O,KAAKxB,EAAIhN,MAAMwK,oBAC3B9F,OAAO,SAAAT,GACJ,OAAO+I,EAAIhN,MAAMwK,mBAAmBvG,KAEvCD,IAAI,SAAAyK,GACD,IAAIC,EAAO1B,EAAIzB,kBAAkBkD,GACjC,OAAKC,EAEDA,EAAKxK,UACE,KACJ,CAAC6H,MAAO0C,EAAGvO,KAAMwO,EAAK7K,SAHlB,CAACkI,MAAO0C,EAAGvO,KAAM,MAMhC4L,EAAIxH,SAAS,MACbpC,EAAKR,SAAS,CACVL,WAAW,IAInB2L,EAAInB,WAAWC,KA5BvB,qDA1RtBzI,aCREsL,QACW,cAA7BnC,OAAOC,SAASmC,UAEe,UAA7BpC,OAAOC,SAASmC,UAEhBpC,OAAOC,SAASmC,SAASC,MACvB,2DCZNrC,OAAOsC,sCAAuC,EAE9CC,IAASC,OAAO/N,EAAAC,EAAAC,cAAC8N,GAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnF,KAAK,SAAAoF,GACjCA,EAAaC","file":"static/js/main.c39f46fc.chunk.js","sourcesContent":["import {Component} from \"react\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport TextField from \"@material-ui/core/TextField/TextField\";\nimport React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport Switch from \"@material-ui/core/Switch/Switch\";\nimport Collapse from \"@material-ui/core/Collapse/Collapse\";\nimport Divider from \"@material-ui/core/Divider/Divider\";\n\nclass DirectorSettings extends Component {\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (!Object.is(this.state.data, prevState.data) || this.state.specified !== prevState.specified) {\n            this.props.onChange(this.getData());\n        }\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            specified: false,\n            data: {\n                f: \"\",\n                i: \"\",\n                o: \"\",\n                work: \"\",\n                degree: \"\",\n                position: \"\",\n            }\n        };\n        this.props.onChange(this.getData());\n    }\n\n    getData = () => {\n        if (!this.state.specified) {\n            return {\n                data: {specified: false}, error: false\n            }\n        }\n        return {\n            data: {...this.state}, error: (\n                this.state.data.f === \"\" ||\n                this.state.data.i === \"\" ||\n                this.state.data.o === \"\" ||\n                this.state.data.work === \"\" ||\n                this.state.data.position === \"\"\n            )\n        }\n    };\n\n    getTextField = (label, name, required = true) => {\n        return (\n            <TextField\n                error={this.props.showError && this.state.data[name] === \"\" && required}\n                fullWidth\n                label={label}\n                value={this.state.data[name]}\n                onChange={event => {\n                    this.setState({\n                        data: {...this.state.data, [name]: event.target.value}\n                    })\n                }}\n            />\n        );\n    };\n\n    render() {\n        return (\n            <div>\n                <Typography variant={\"subtitle1\"} color={\"primary\"} style={{padding: 10}}>\n                    {this.props.field.title}\n                </Typography>\n                <div style={{\n                    display: \"flex\",\n                    alignItems: \"center\"\n                }}>\n                    <Switch\n                        checked={this.state.specified}\n                        onChange={event => {\n                            this.setState({\n                                specified: event.target.checked\n                            })\n                        }}\n                        color=\"primary\"\n                    />\n                    <Typography variant={\"subtitle2\"}>\n                        Научный руководитель определен\n                    </Typography>\n                </div>\n                <Collapse in={this.state.specified}>\n                    <form noValidate autoComplete=\"off\" style={{paddingLeft: 20, paddingBottom: 30}}>\n                        {this.getTextField(\"Фамилия*\", \"f\")}\n                        {this.getTextField(\"Имя*\", \"i\")}\n                        {this.getTextField(\"Отчество*\", \"o\")}\n                        {this.getTextField(\"Место работы*\", \"work\")}\n                        {this.getTextField(\"Ученая степень\", \"degree\", false)}\n                        {this.getTextField(\"Должность*\", \"position\")}\n                    </form>\n                </Collapse>\n                <Divider/>\n            </div>\n        );\n    }\n}\n\nDirectorSettings.defaultProps = {\n    showError: false,\n};\n\nDirectorSettings.propTypes = {\n    onChange: PropTypes.func,\n    showError: PropTypes.bool,\n    field: PropTypes.object.isRequired,\n};\n\nexport default DirectorSettings;","import {Component} from \"react\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport TextField from \"@material-ui/core/TextField/TextField\";\nimport React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport Divider from \"@material-ui/core/Divider/Divider\";\n\nclass CustomField extends Component {\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.theme !== this.state.theme) {\n            this.props.onChange(this.getData());\n        }\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            theme: \"\",\n        };\n        this.props.onChange(this.getData());\n    }\n\n    getData = () => {\n        return {data: {data: this.state}, error: this.state.theme === \"\"}\n    };\n\n    render() {\n        return (\n            <div>\n                <Typography variant={\"subtitle1\"} color={\"primary\"} style={{padding: 12}}>\n                    {this.props.field.title}\n                </Typography>\n                <TextField\n                    style={{\n                        margin: 20,\n                        marginTop: 0,\n                    }}\n                    error={this.props.showError && this.state.theme === \"\"}\n                    fullWidth\n                    label={`${this.props.field.title}*`}\n                    value={this.state.theme}\n                    onChange={event => {\n                        this.setState({\n                            theme: event.target.value\n                        });\n                    }}\n                />\n                <Divider/>\n            </div>\n        );\n    }\n}\n\nCustomField.defaultProps = {\n    showError: false,\n};\n\nCustomField.propTypes = {\n    onChange: PropTypes.func,\n    showError: PropTypes.bool,\n    field: PropTypes.object.isRequired,\n};\n\nexport default CustomField;","import {Component} from \"react\";\nimport PropTypes from \"prop-types\"\nimport React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport List from \"@material-ui/core/List/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Radio from \"@material-ui/core/Radio\";\nimport ListSubheader from \"@material-ui/core/ListSubheader/ListSubheader\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport Button from \"@material-ui/core/Button/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\nimport DirectorSettings from \"./DirectorSettings\";\nimport CustomField from \"./CustomField\";\n\n\nclass OlimpSettingsSubList extends Component {\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return (!Object.is(this.state.selected, nextState.selected) ||\n            this.props.showError !== nextProps.showError);\n    }\n\n    constructor(props) {\n        super(props);\n        let fieldsData = null;\n        if (this.props.fields) {\n            fieldsData = {};\n            this.props.fields.forEach(field => {\n                fieldsData[field.name] = null;\n            })\n        }\n        this.state = {\n            selected: [],\n            fieldsData: fieldsData\n        };\n        this.subRefs = [];\n        this.props.children.forEach(child => {\n            this.subRefs.push(null);\n        })\n    }\n\n    check = () => {\n        return {\n            ...this.state, next: this.subRefs.map(k => {\n                if (k)\n                    return k.check();\n                return null\n            })\n        };\n    };\n\n    isError = () => {\n        return (\n            this.state.selected.length === 0 ||\n            (this.state.fieldsData && Object.values(this.state.fieldsData).includes(null)) ||\n            this.state.selected.map(sel => {\n            let s = this.subRefs[sel];\n            if (s)\n                return s.isError();\n            return false;\n        }).includes(true))\n    };\n\n    clear = () => {\n        this.setState({\n            selected: []\n        });\n        this.subRefs.filter(r => !!r).forEach((r) => r.clear());\n        this.props.onSelectionChanged();\n    };\n\n    clearSublist = (i) => {\n        let subList = this.subRefs[i];\n        if (subList)\n            subList.clear();\n    };\n\n    renderFields = () => {\n        if (!this.props.fields)\n            return null;\n\n        let settingsListRef = this;\n\n        return this.props.fields.map(field => {\n\n            let args = {\n                field: field,\n                onChange: (data) => {\n                    let newData = data.error ? null : data.data;\n                    settingsListRef.setState({\n                        fieldsData: {...settingsListRef.state.fieldsData, [field.name]: newData}\n                    });\n                    settingsListRef.props.onSelectionChanged();\n                },\n                showError: settingsListRef.props.showError,\n                key: field.name\n            };\n            let getContent = () => {\n                switch (field.type) {\n                    case \"field\":\n                        return <CustomField {...args}/>;\n                    case \"director\":\n                        return <DirectorSettings {...args}/>;\n                    default:\n                        return null;\n                }\n            };\n\n            return getContent();\n        })\n    };\n\n    render() {\n        let sublistProps = {\n            depth: this.props.depth + 1,\n            onSelectionChanged: this.props.onSelectionChanged,\n            showError: this.props.showError,\n            topList: this.props.topList\n        };\n\n        let showError = this.props.showError && this.state.selected.length === 0;\n\n        let listRef = this;\n\n        return (\n            <Paper\n                style={{\n                    marginLeft: 8,\n                    backgroundColor: showError ? \"#ff9292\" : \"#fff\"\n                }}>\n                <List\n                    subheader={\n                        <ListSubheader\n                            disableSticky\n                        >\n                            {this.props.subhint ? this.props.subhint : null}\n                            {this.renderFields()}\n                        </ListSubheader>\n                    }>\n\n                    {this.props.children.map((elem, index) => {\n                        let selected = this.state.selected.includes(index);\n\n                        let toggle = () => {\n                            if (listRef.props.multiSelect) {\n                                if (listRef.state.selected.includes(index)) {\n                                    listRef.clearSublist(index);\n                                    listRef.setState({\n                                        selected: listRef.state.selected.filter(i => i !== index)\n                                    });\n                                }\n                                else {\n                                    listRef.setState({\n                                        selected: [...listRef.state.selected, index]\n                                    });\n                                }\n                            }\n                            else {\n                                if (listRef.state.selected[0] === index) {\n                                    listRef.clearSublist(index);\n                                    listRef.setState({\n                                        selected: []\n                                    });\n                                }\n                                else {\n                                    listRef.setState({\n                                        selected: [index]\n                                    });\n                                }\n                            }\n\n                            this.props.onSelectionChanged();\n                        };\n\n                        return (\n                            <div key={index}>\n                                <ListItem dense\n                                          button\n                                          onClick={() => {\n                                              toggle();\n                                          }}>\n\n                                    {this.props.multiSelect ?\n                                        <Checkbox checked={selected}/> :\n                                        <Radio checked={selected}/>}\n\n                                    <ListItemText primary={elem.text}\n                                                  secondary={elem.hint}\n                                                  inset\n                                                  secondaryTypographyProps={{\n                                                      component: \"pre\",\n                                                      style: {\n                                                          whiteSpace: \"pre-wrap\"\n                                                      }\n                                                  }}/>\n                                </ListItem>\n                                <Collapse in={selected} mountOnEnter>\n                                    {elem.children ?\n                                        <OlimpSettingsSubList\n                                            {...sublistProps}\n                                            ref={(r) => {\n                                                this.subRefs[index] = r;\n                                            }}\n                                            subhint={elem.subhint}\n                                            fields={elem.fields}\n                                            multiSelect={elem.multiSelect}\n                                            indexes={[...this.props.indexes, {\n                                                index: index,\n                                                fieldsData: this.state.fieldsData\n                                            }]}\n                                            children={elem.children.map((child, childID) => {\n                                                let nextChildProps = {\n                                                    multiSelect: child.multiSelect,\n                                                    text: child.title,\n                                                    hint: child.hint ? child.hint.help : null,\n                                                    subhint: child.hint ? child.hint.instruction : null,\n                                                    fields: child.fields,\n                                                };\n                                                if (child.children) {\n                                                    return {\n                                                        ...nextChildProps,\n                                                        children: child.children,\n                                                    }\n                                                }\n                                                return {\n                                                    text: `${child.name} - ${child.fullname}`\n                                                }\n                                            })}/>\n                                        : null}\n                                </Collapse>\n                            </div>\n                        )\n                    })}\n                </List>\n            </Paper>\n        );\n    }\n}\n\n\nclass OlimpSettingsList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.children = this.props.children;\n    }\n\n    clear = () => {\n        this.listRef.clear();\n        if (this.props.onSelectionChanged)\n            this.props.onSelectionChanged();\n    };\n\n    check = () => {\n        return this.listRef.check();\n    };\n\n    isError = () => {\n        return this.listRef.isError();\n    };\n\n    render() {\n        return (\n            <div>\n                <Typography variant={\"subtitle1\"} color={\"primary\"} style={{padding: 10}}>\n                    {this.props.instruction}\n                </Typography>\n                <Button color={\"primary\"} variant={\"contained\"} onClick={() => this.clear()} style={{\n                    margin: 8\n                }}>\n                    Отменить выбор\n                </Button>\n                <OlimpSettingsSubList\n                    ref={r => this.listRef = r}\n                    children={this.props.children.map((child, id) => {\n                        return {\n                            children: child.children,\n                            fields: child.fields,\n                            text: child.title,\n                            multiSelect: child.multiselect,\n                            hint: child.hint ? child.hint.help : null,\n                            subhint: child.hint ? child.hint.instruction : null,\n                        }\n                    })}\n                    topList={this}\n                    onSelectionChanged={() => this.props.onSelectionChanged()}\n                    indexes={[]}\n                    clearFunc={this.clear}\n                    showError={this.props.showError}\n                    depth={0}\n                />\n            </div>\n        );\n    }\n}\n\nOlimpSettingsList.defaultProps = {\n    multiSelect: false,\n};\n\nOlimpSettingsList.propTypes = {\n    instruction: PropTypes.string,\n    children: PropTypes.array.isRequired,\n    multiSelect: PropTypes.bool,\n    showError: PropTypes.bool.isRequired\n};\n\nexport default OlimpSettingsList;","class API {\n\n    constructor() {\n        this.host = \"https://olymp.bmstu.ru/api/personal\";\n    }\n\n    requestData(method, httpMethod, params) {\n        // console.log('ReqMeth:'+httpMethod);\n        const url = this.host + '/' + method;\n        const httpRequest = {\n            credentials: 'include',\n            method: httpMethod,\n            headers: {\n                'Content-type': 'application/json',\n                'Access-Control-Request-Method': httpMethod\n            },\n            mode: 'cors',\n            body: null\n        };\n\n        if(httpMethod === 'POST' && typeof params !== 'undefined') {\n            httpRequest.body = JSON.stringify(params);\n        }\n\n        return fetch(url, httpRequest).then(\n            function(response) {\n                response = response.json();\n                return response;\n            },\n            function(response) {\n                return response;\n            }\n        );\n    }\n\n}\n\nexport default new API();","import React, {Component} from 'react';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel/StepLabel\";\nimport StepContent from \"@material-ui/core/StepContent/StepContent\";\nimport List from \"@material-ui/core/List/List\";\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\nimport ListItem from \"@material-ui/core/ListItem/ListItem\";\nimport Button from \"@material-ui/core/Button/Button\";\nimport Divider from \"@material-ui/core/Divider/Divider\";\nimport OlimpSettingsList from \"./OlimpSettingsList\";\nimport Popper from \"@material-ui/core/Popper\";\nimport Paper from \"@material-ui/core/Paper/Paper\";\nimport Fade from \"@material-ui/core/Fade/Fade\";\nimport api from \"./api/api\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.api = api;\n        this.state = {\n            data: null,\n            selectedDirections: null,\n            step: 0,\n\n            showError: false,\n\n            submitLoading: false\n        };\n        this.olimpSettingsList = {};\n        //\n        // fetch(\"http://195.19.59.194:80\")\n        //     .then((data) => {return data.json()})\n        //     .then((json) => this.onDataLoaded(json[\"answer\"][0]));\n\n        fetch(\"data/db.json\")\n            .then((data) => {\n                return data.json()\n            })\n            .then((json) => this.onDataLoaded(json[\"answer\"][0]))\n            .catch((reason => {\n                console.log(reason);\n            }));\n\n        // setTimeout(() => {\n        //     let data = sampleData[\"answer\"][0];\n        //     this.onDataLoaded(data);\n        //\n        // }, 1000)\n    }\n\n    onDataLoaded = (data) => {\n        // console.log(data);\n        let selectedDirections = {};\n\n        Object.entries(data.children).map(entry => entry[1]).forEach(direction => {\n            selectedDirections[direction.title] = false;\n        });\n\n        this.setState({\n            selectedDirections: selectedDirections,\n            data: data\n        })\n    };\n\n    renderDirectionsList = () => {\n        return (\n            <List>\n                {Object\n                    .entries(this.state.data.children)\n                    .map(entry => entry[1])\n                    .map((direction) => {\n                        return (\n                            <ListItem dense button key={direction.title} onClick={() => {\n                                this.setState({\n                                        selectedDirections: {\n                                            ...this.state.selectedDirections,\n                                            [direction.title]: !this.state.selectedDirections[direction.title]\n                                        }\n                                    }\n                                );\n                            }}>\n                                <Checkbox\n                                    checked={this.state.selectedDirections[direction.title]}\n                                    tabIndex={-1}\n                                    disableRipple\n                                />\n                                <ListItemText primary={direction.title}\n                                              inset\n                                              secondary={direction.hint.help}\n                                              secondaryTypographyProps={{\n                                                  component: \"pre\",\n                                                  style: {\n                                                      whiteSpace: \"pre-wrap\"\n                                                  }\n                                              }}/>\n                            </ListItem>\n                        );\n                    })}\n            </List>\n        );\n    };\n\n    renderDirectionsSettings = () => {\n        let directions = this.state.data.children.map(direction => {\n            if (this.state.selectedDirections[direction.title]) {\n                return direction;\n            }\n            return null;\n        }).filter(direction => direction != null);\n\n        return directions.map(direction => {\n            return (\n                <div key={direction.title} style={{marginTop: 40}}>\n                    <Divider/>\n                    <div>\n                        <Typography variant={\"h5\"} color={\"primary\"}\n                                    style={{display: \"inline-block\", margin: 10, verticalAlign: \"middle\"}}>\n                            {direction.title}\n                        </Typography>\n                        <Button color={\"secondary\"} variant={\"outlined\"}\n                                style={{display: \"inline-block\", margin: 10, verticalAlign: \"middle\"}}\n                                onClick={() => {\n                                    let nextStep = 1;\n                                    if (Object\n                                        .values(this.state.selectedDirections)\n                                        .filter(selected => selected).length === 1) {\n                                        nextStep = 0;\n                                    }\n                                    this.setState({\n                                            selectedDirections: {\n                                                ...this.state.selectedDirections,\n                                                [direction.title]: !this.state.selectedDirections[direction.title]\n                                            },\n                                            step: nextStep,\n                                            showError: false\n                                        }\n                                    );\n                                }}\n                        >\n                            Не участвовать в этой олимпиаде\n                        </Button>\n                    </div>\n\n                    {direction.children.length !== 0 &&\n                    <OlimpSettingsList\n                        ref={i => {\n                            this.olimpSettingsList[direction.title] = i\n                        }}\n                        instruction={direction.hint.instruction}\n                        children={direction.children}\n                        showError={this.state.showError}\n                        onSelectionChanged={() => {\n                            if (this.state.showError) {\n                                this.setState({\n                                    showError: false\n                                });\n                            }\n                        }}\n                    />}\n                </div>\n            );\n        });\n    };\n\n    renderLoading = () => {\n        return (\n            <div style={{\n                position: \"relative\",\n                flex: \"1 1 auto\",\n                display: \"flex\",\n                width: \"100%\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                flexDirection: \"column\"\n            }}>\n                <Typography variant={\"h5\"}>\n                    Загрузка...\n                </Typography>\n            </div>\n        );\n    };\n\n    submitData = (data) => {\n        let translateData = (data, server) => {\n            return {\n                fieldsData: data.fieldsData,\n\n                next: data.next.map((n, id) => {\n                    if (n == null)\n                        return null;\n                    return {id: id, data: translateData(n, server.children[id])}\n                }).filter(n => n != null),\n\n                selected: server.children.map((child, id) => {\n                    if (data.selected.includes(id))\n                        return child.title || child.id;\n                    return null;\n                }).filter(child => child != null)\n            };\n        };\n\n        let ans = data.map(olimp => {\n            let directionName = olimp.olimp;\n            let baseChildren = this.state.data.children.filter(child => child.title === directionName)[0];\n            if (baseChildren.children.length === 0) {\n                return {olimp: directionName, data: {}};\n            }\n            return {olimp: directionName, data: translateData(olimp.data, baseChildren)};\n        });\n\n        this.setState({\n            submitLoading: true\n        });\n\n        this.api.requestData(\"olymps\", \"POST\", ans)\n            .then((resp) => {\n                window.location.href = `https://olymp.bmstu.ru/?from=olymps&res_code=${resp.res_code}`;\n            })\n            .catch((error) => {\n                this.setState({\n                    submitLoading: false\n                })\n            });\n    };\n\n    render() {\n        let app = this;\n        return (\n            <div style={{\n                display: \"flex\",\n                flexFlow: \"column\",\n                minHeight: \"100vh\",\n                width: \"100%\"\n            }}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant={\"h6\"} color=\"inherit\" noWrap>\n                            Выберите олимпиады\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                {this.state.data == null ? this.renderLoading() : (\n                    <div>\n                        <Typography variant={\"h4\"} color={\"primary\"} style={{padding: 24, paddingBottom: 0}}>\n                            {this.state.data.title}\n                        </Typography>\n                        <Stepper activeStep={this.state.step} orientation=\"vertical\">\n                            <Step>\n                                <StepLabel>Выберите направления</StepLabel>\n                                <StepContent>\n                                    {this.renderDirectionsList()}\n                                    <Button\n                                        color={\"primary\"}\n                                        variant={\"outlined\"}\n                                        style={{marginLeft: 28}}\n                                        onClick={() => {\n                                            this.setState({step: 1})\n                                        }}\n                                        disabled={\n                                            !Object.values(this.state.selectedDirections).includes(true)\n                                        }\n                                    >\n                                        Далее\n                                    </Button>\n                                </StepContent>\n                            </Step>\n                            <Step>\n                                <StepLabel>Заполните данные</StepLabel>\n                                <StepContent>\n                                    <Button\n                                        color={\"primary\"}\n                                        variant={\"outlined\"}\n                                        style={{margin: 8}}\n                                        onClick={() => {\n                                            this.setState({step: 0, showError: false})\n                                        }}\n                                    >\n                                        Назад (выбрать другие направления)\n                                    </Button>\n                                    <Popper anchorEl={this.readyButton}\n                                            open={this.state.showError}\n                                            transition>\n                                        {({TransitionProps}) => (\n                                            <Fade {...TransitionProps} timeout={250}>\n                                                <Paper style={{backgroundColor: \"#ff9292\", padding: 12}}>\n                                                    <Typography>\n                                                        Все поля должны быть заполнены\n                                                    </Typography>\n                                                </Paper>\n                                            </Fade>\n                                        )}\n                                    </Popper>\n                                    {this.renderDirectionsSettings()}\n                                    <div\n                                        style={{margin: 8, marginTop: 50}}>\n                                        <Button\n                                            disabled={this.state.submitLoading}\n                                            color={\"primary\"}\n                                            variant={\"contained\"}\n                                            fullWidth\n                                            buttonRef={(r) => {\n                                                this.readyButton = r;\n                                            }}\n                                            onClick={() => {\n                                                let ans = Object.keys(app.state.selectedDirections)\n                                                    .filter(k => {\n                                                        return app.state.selectedDirections[k];\n                                                    })\n                                                    .map(d => {\n                                                        let list = app.olimpSettingsList[d];\n                                                        if (!list)\n                                                            return {olimp: d, data: {}};\n                                                        if (list.isError())\n                                                            return null;\n                                                        return {olimp: d, data: list.check()};\n                                                    });\n\n                                                if (ans.includes(null)) {\n                                                    this.setState({\n                                                        showError: true\n                                                    });\n                                                    return;\n                                                }\n                                                app.submitData(ans)\n                                            }}>\n                                            Готово\n                                        </Button>\n                                    </div>\n                                </StepContent>\n                            </Step>\n                        </Stepper>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__ = true;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}