{"version":3,"sources":["OlimpSettingsList.js","ScientificWorkSettings.js","App.js","serviceWorker.js","index.js"],"names":["OlimpSettingsSubList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected","nextProps","nextState","nextContext","showError","_this2","sublistProps","depth","onSelectionChanged","react_default","a","createElement","Paper_default","style","marginLeft","backgroundColor","List_default","subheader","subhint","ListSubheader_default","children","map","elem","index","key","core_ListItem_default","dense","button","onClick","setState","toConsumableArray","indexes","Radio_default","checked","core_ListItemText_default","primary","text","secondary","hint","Collapse_default","in","assign","child","childID","nextChildProps","title","help","instruction","concat","objectSpread","name","fullname","Component","OlimpSettingsList","_this3","_this4","OlimpSettingsList_OlimpSettingsSubList","id","data","result","onDoneStateChanged","ScientificWorkSettings","handleChange","newValue","newData","defineProperty","valid","theme","knownDirector","fio","work","degree","position","onChange","getSwitch","Switch_default","event","target","color","getTextField","label","TextField_default","error","fullWidth","value","Typography_Typography_default","variant","padding","noValidate","autoComplete","paddingLeft","paddingBottom","display","alignItems","Collapse_Collapse_default","defaultProps","App","onDataLoaded","selectedDirections","directionSettingsDoneStates","entries","entry","forEach","direction","done","length","renderDirectionsList","ListItem_default","Checkbox_default","tabIndex","disableRipple","ListItemText_default","renderDirectionsSettings","filter","marginTop","Divider_default","Typography_default","src_ScientificWorkSettings","scientificWorkSettings","src_OlimpSettingsList","renderLoading","flex","width","justifyContent","flexDirection","submitData","directionSettings","keys","tmp","i","nowData","push","_data","objectWithoutProperties","console","log","alert","step","fetch","then","json","catch","reason","flexFlow","minHeight","AppBar_default","Toolbar_default","noWrap","Stepper_default","activeStep","orientation","Step_default","StepLabel_default","StepContent_default","Button_default","disabled","values","includes","margin","buttonRef","r","readyButton","s","Popper_default","anchorEl","open","transition","_ref","TransitionProps","Fade_default","timeout","Paper_Paper_default","Boolean","window","location","hostname","match","__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9296a6c6.chunk.js","sourcesContent":["import {Component} from \"react\";\nimport PropTypes from \"prop-types\"\nimport React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport List from \"@material-ui/core/List/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Radio from \"@material-ui/core/Radio\";\nimport ListSubheader from \"@material-ui/core/ListSubheader/ListSubheader\";\n\n\nclass OlimpSettingsSubList extends Component {\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return (this.state.selected !== nextState.selected ||\n            this.props.showError !== nextProps.showError);\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: -1,\n        };\n    }\n\n    render() {\n        let sublistProps = {\n            depth: this.props.depth + 1,\n            onSelectionChanged: this.props.onSelectionChanged,\n            showError: this.props.showError\n        };\n\n        return (\n            <Paper\n                style={{\n                    marginLeft: 8,\n                    backgroundColor: this.props.showError ?\n                        (this.state.selected === -1 ? \"#ff9292\" : \"#fff\")\n                        : \"#fff\",\n                }}>\n                <List\n                    subheader={\n                        this.props.subhint ?\n                            <ListSubheader>\n                                {this.props.subhint}\n                            </ListSubheader> : null\n                    }>\n                    {this.props.children.map((elem, index) => {\n                        let selected = index === this.state.selected;\n\n                        let toggle = () => {\n                            this.setState({\n                                selected: index\n                            });\n                            this.props.onSelectionChanged([...elem.indexes], !elem.children)\n                        };\n\n                        return (\n                            <div key={index}>\n                                <ListItem dense\n                                          button\n                                          onClick={() => {\n                                              toggle();\n                                          }}>\n                                    <Radio\n                                        checked={selected}/>\n                                    <ListItemText primary={elem.text} secondary={elem.hint}/>\n                                </ListItem>\n                                <Collapse in={selected}>\n                                    {selected && elem.children ?\n                                        <OlimpSettingsSubList\n                                            {...sublistProps}\n                                            subhint={elem.subhint}\n                                            children={elem.children.map((child, childID) => {\n                                                let nextChildProps = {\n                                                    text: child.title,\n                                                    hint: child.hint ? child.hint.help : null,\n                                                    subhint: child.hint ? child.hint.instruction : null,\n                                                    indexes: [...elem.indexes, childID]\n                                                };\n                                                if (child.children) {\n                                                    return {\n                                                        ...nextChildProps,\n                                                        children: child.children,\n                                                    }\n                                                }\n                                                return {\n                                                    indexes: [...elem.indexes, childID],\n                                                    text: `${child.name} - ${child.fullname}`\n                                                }\n                                            })}/>\n                                        : null}\n                                </Collapse>\n                            </div>\n                        )\n                    })}\n                </List>\n            </Paper>\n        );\n    }\n}\n\n\nclass OlimpSettingsList extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: null,\n        };\n    }\n\n    render() {\n        return <OlimpSettingsSubList\n            children={this.props.children.map((child, id) => {\n                return {\n                    children: child.children,\n                    text: child.title,\n                    hint: child.hint ? child.hint.help : null,\n                    subhint: child.hint ? child.hint.instruction : null,\n                    indexes: [id]\n                }\n            })}\n            showError={this.props.showError}\n            depth={0}\n            onSelectionChanged={(data, result) => {\n                if (this.props.onSelectionChanged)\n                    this.props.onSelectionChanged();\n\n                if (result) {\n                    if (this.state.selected == null)\n                        this.props.onDoneStateChanged(true, data);\n                    this.setState({\n                        selected: data\n                    });\n                }\n                else {\n                    if (this.state.selected)\n                        this.props.onDoneStateChanged(false, null);\n                    this.setState({\n                        selected: null\n                    });\n                }\n            }}\n        />\n    }\n}\n\nOlimpSettingsList.propTypes = {\n    children: PropTypes.array.isRequired,\n    showError: PropTypes.bool.isRequired,\n    onDoneStateChanged: PropTypes.func.isRequired,\n    onSelectionChanged: PropTypes.func,\n};\n\nexport default OlimpSettingsList;","import {Component} from \"react\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport TextField from \"@material-ui/core/TextField/TextField\";\nimport React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport Switch from \"@material-ui/core/Switch/Switch\";\nimport Collapse from \"@material-ui/core/Collapse/Collapse\";\n\nclass ScientificWorkSettings extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: {\n                theme: \"\",\n                knownDirector: false,\n                fio: \"\",\n                work: \"\",\n                degree: \"\",\n                position: \"\",\n                valid: false\n            }\n        };\n    }\n\n    handleChange = (name, newValue) => {\n        let newData = {...this.state.data, [name]: newValue};\n        newData.valid = newData.theme !== \"\" && (!newData.knownDirector || (\n            newData.fio !== \"\" &&\n            newData.work !== \"\" &&\n            newData.degree !== \"\" &&\n            newData.position !== \"\"\n        ));\n        if (this.props.onChange)\n            this.props.onChange(newData);\n        this.setState({\n            data: newData,\n        });\n    };\n\n    getSwitch = (name) => {\n        return (\n            <Switch\n                checked={this.state.data[name]}\n                onChange={event => {\n                    this.handleChange(name, event.target.checked);\n                }}\n                color=\"primary\"\n            />\n        );\n    };\n\n\n    getTextField = (label, name) => {\n        return (\n            <TextField\n                key={name}\n                error={this.props.showError && this.state.data[name] === \"\"}\n                fullWidth\n                label={label}\n                value={this.state.data[name]}\n                onChange={event => {\n                    this.handleChange(name, event.target.value);\n                }}\n            />\n        );\n    };\n\n    render() {\n        return (\n            <div>\n                <Typography variant={\"subtitle1\"} color={\"primary\"} style={{padding: 10}}>\n                    Введите тему научной работы\n                </Typography>\n                <form noValidate autoComplete=\"off\" style={{paddingLeft: 10, paddingBottom: 30}}>\n                    {this.getTextField(\"Тема научной работы\", \"theme\")}\n                </form>\n                <Typography variant={\"subtitle1\"} color={\"primary\"} style={{padding: 10}}>\n                    Введите данные о научном руководителе\n                </Typography>\n                <div style={{\n                    display: \"flex\",\n                    alignItems: \"center\"\n                }}>\n                    {this.getSwitch(\"knownDirector\")}\n                    <Typography variant={\"subtitle2\"}>\n                        Научный руководитель определен\n                    </Typography>\n                </div>\n                <Collapse in={this.state.data.knownDirector}>\n                    <form noValidate autoComplete=\"off\" style={{paddingLeft: 10, paddingBottom: 30}}>\n                        {this.getTextField(\"ФИО\", \"fio\")}\n                        {this.getTextField(\"Место работы\", \"work\")}\n                        {this.getTextField(\"Ученая степень\", \"degree\")}\n                        {this.getTextField(\"Должность\", \"position\")}\n                    </form>\n                </Collapse>\n            </div>\n        );\n    }\n}\n\nScientificWorkSettings.defaultProps = {\n    showError: false,\n};\n\nScientificWorkSettings.propTypes = {\n    onChange: PropTypes.func,\n    showError: PropTypes.bool,\n};\n\nexport default ScientificWorkSettings;","import React, {Component} from 'react';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel/StepLabel\";\nimport StepContent from \"@material-ui/core/StepContent/StepContent\";\nimport List from \"@material-ui/core/List/List\";\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\nimport ListItem from \"@material-ui/core/ListItem/ListItem\";\nimport Button from \"@material-ui/core/Button/Button\";\nimport Divider from \"@material-ui/core/Divider/Divider\";\nimport OlimpSettingsList from \"./OlimpSettingsList\";\nimport ScientificWorkSettings from \"./ScientificWorkSettings\";\nimport Popper from \"@material-ui/core/Popper\";\nimport Paper from \"@material-ui/core/Paper/Paper\";\nimport Fade from \"@material-ui/core/Fade/Fade\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: null,\n            selectedDirections: null,\n            step: 0,\n\n            showError: false,\n            directionSettingsDoneStates: null,\n\n            scientificWorkSettings: null,\n        };\n        //\n        // fetch(\"http://195.19.59.194:80\")\n        //     .then((data) => {return data.json()})\n        //     .then((json) => this.onDataLoaded(json[\"answer\"][0]));\n\n        fetch(\"data/db.json\")\n            .then((data) => {return data.json()})\n            .then((json) => this.onDataLoaded(json[\"answer\"][0]))\n            .catch((reason => {\n                console.log(reason);\n            }));\n\n        // setTimeout(() => {\n        //     let data = sampleData[\"answer\"][0];\n        //     this.onDataLoaded(data);\n        //\n        // }, 1000)\n    }\n\n    onDataLoaded = (data) => {\n        // console.log(data);\n        let selectedDirections = {};\n        let directionSettingsDoneStates = {};\n\n        Object.entries(data.children).map(entry => entry[1]).forEach(direction => {\n            selectedDirections[direction.title] = false;\n            directionSettingsDoneStates[direction.title] = {done: direction.children.length === 0, data: null}\n        });\n\n        this.setState({\n            selectedDirections: selectedDirections,\n            directionSettingsDoneStates: directionSettingsDoneStates,\n            data: data\n        })\n    };\n\n    renderDirectionsList = () => {\n        return (\n            <List>\n                {Object\n                    .entries(this.state.data.children)\n                    .map(entry => entry[1])\n                    .map((direction) => {\n                        return (\n                            <ListItem dense button key={direction.title} onClick={() => {\n                                this.setState({\n                                        selectedDirections: {\n                                            ...this.state.selectedDirections,\n                                            [direction.title]: !this.state.selectedDirections[direction.title]\n                                        }\n                                    }\n                                );\n                            }}>\n                                <Checkbox\n                                    checked={this.state.selectedDirections[direction.title]}\n                                    tabIndex={-1}\n                                    disableRipple\n                                />\n                                <ListItemText primary={direction.title} secondary={direction.hint.help}/>\n                            </ListItem>\n                        );\n                    })}\n            </List>\n        );\n    };\n\n    renderDirectionsSettings = () => {\n        let directions = this.state.data.children.map(direction => {\n            if (this.state.selectedDirections[direction.title]) {\n                return direction;\n            }\n            return null;\n        }).filter(direction => direction != null);\n\n        return directions.map(direction => {\n            if (direction.children.length === 0) {\n                return null;\n            }\n            return (\n                <div key={direction.title} style={{marginTop: 40}}>\n                    <Divider/>\n                    <Typography variant={\"h5\"} color={\"primary\"} style={{padding: 12, paddingBottom: 0}}>\n                        {direction.title}\n                    </Typography>\n                    {/*KOSTYL!!!!!!!*/}\n\n                    {direction.title === \"Инженерное дело\" && (\n                        <ScientificWorkSettings\n                            onChange={data => {\n                                this.setState({\n                                    scientificWorkSettings: data\n                                });\n                                if (this.state.showError) {\n                                    this.setState({\n                                        showError: false\n                                    });\n                                }\n                            }}\n                            showError={this.state.showError}\n                        />\n                    )}\n\n                    {/*END KOSTYL!!!!!!!*/}\n                    <Typography variant={\"subtitle1\"} color={\"primary\"} style={{padding: 10}}>\n                        {direction.hint.instruction}\n                    </Typography>\n                    <OlimpSettingsList\n                        children={direction.children}\n                        showError={this.state.showError}\n                        onDoneStateChanged={(done, data) => {\n                            this.setState({\n                                directionSettingsDoneStates: {\n                                    ...this.state.directionSettingsDoneStates,\n                                    [direction.title]: {\n                                        done: done,\n                                        data: data,\n                                    }\n                                }\n                            });\n                        }}\n                        onSelectionChanged={() => {\n                            if (this.state.showError) {\n                                this.setState({\n                                    showError: false\n                                });\n                            }\n                        }}\n                    />\n                </div>\n            );\n        });\n    };\n\n    renderLoading = () => {\n        return (\n            <div style={{\n                position: \"relative\",\n                flex: \"1 1 auto\",\n                display: \"flex\",\n                width: \"100%\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                flexDirection: \"column\"\n            }}>\n                <Typography variant={\"h5\"}>\n                    Загрузка...\n                </Typography>\n            </div>\n        );\n    };\n\n    submitData = () => {\n        // let selectedDirections =\n        //     Object.keys(this.state.selectedDirections)\n        //         .filter((direction) => {\n        //             return this.state.selectedDirections[direction];\n        //         });\n\n        let directionSettings = Object.keys(this.state.directionSettingsDoneStates)\n            .map(direction => {\n                return {\n                    name: direction,\n                    data: this.state.directionSettingsDoneStates[direction].data\n                };\n            })\n            .filter(direction => {\n                return direction.data != null;\n            })\n            .map(direction => {\n                let newData = [];\n\n                let tmp = this.state.data.children\n                    .filter(child => child.title === direction.name)[0];\n\n                for (let i = 0; i < direction.data.length; i++) {\n                    let nowData = direction.data[i];\n                    tmp = tmp.children[nowData];\n                    if (tmp.title)\n                        newData.push(tmp.title);\n                    if (tmp.id)\n                        newData.push(tmp.id);\n                }\n\n                return {\n                    name: direction.name,\n                    data: newData\n                }\n            });\n\n        if (this.state.scientificWorkSettings) {\n            let data = this.state.scientificWorkSettings;\n            if (!data.knownDirector) {\n                data = {\n                    theme: data.theme,\n                    knownDirector: false\n                }\n            } else {\n                let {valid, ...tmp} = data;\n                data = tmp;\n            }\n            directionSettings.push({\n                name: \"Научрук\",\n                data: data\n            })\n        }\n\n        console.log(directionSettings);\n        alert(directionSettings);\n    };\n\n    render() {\n        return (\n            <div style={{\n                display: \"flex\",\n                flexFlow: \"column\",\n                minHeight: \"100vh\",\n                width: \"100%\"\n            }}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant={\"h6\"} color=\"inherit\" noWrap>\n                            Выберите олимпиады\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                {this.state.data == null ? this.renderLoading() : (\n                    <div>\n                        <Typography variant={\"h4\"} color={\"primary\"} style={{padding: 24, paddingBottom: 0}}>\n                            {this.state.data.title}\n                        </Typography>\n                        <Stepper activeStep={this.state.step} orientation=\"vertical\">\n                            <Step>\n                                <StepLabel>Выберите направления</StepLabel>\n                                <StepContent>\n                                    {this.renderDirectionsList()}\n                                    <Button\n                                        color={\"primary\"}\n                                        variant={\"outlined\"}\n                                        style={{marginLeft: 28}}\n                                        onClick={() => {\n                                            this.setState({step: 1})\n                                        }}\n                                        disabled={\n                                            !Object.values(this.state.selectedDirections).includes(true)\n                                        }\n                                    >\n                                        Далее\n                                    </Button>\n                                </StepContent>\n                            </Step>\n                            <Step>\n                                <StepLabel>Заполните данные</StepLabel>\n                                <StepContent>\n                                    <Button\n                                        color={\"primary\"}\n                                        variant={\"outlined\"}\n                                        style={{margin: 8}}\n                                        onClick={() => {\n                                            this.setState({step: 0})\n                                        }}\n                                    >\n                                        Выбрать другие направления\n                                    </Button>\n                                    <Button\n                                        color={\"primary\"}\n                                        variant={\"contained\"}\n                                        style={{margin: 8}}\n                                        buttonRef={(r) => {\n                                            this.readyButton = r;\n                                        }}\n                                        onClick={() => {\n                                            if (Object.keys(this.state.selectedDirections)\n                                                .filter((direction) => {\n                                                    return this.state.selectedDirections[direction];\n                                                })\n                                                .map((direction) => {\n                                                    return this.state.directionSettingsDoneStates[direction].done;\n                                                })\n                                                .includes(false)) {\n                                                this.setState({\n                                                    showError: true\n                                                });\n                                                return;\n                                            }\n                                            if (this.state.selectedDirections[\"Инженерное дело\"]) {\n                                                let s = this.state.scientificWorkSettings;\n                                                if (!s) {\n                                                    this.setState({\n                                                        showError: true\n                                                    });\n                                                    return;\n                                                }\n                                                if (!s.valid) {\n                                                    this.setState({\n                                                        showError: true\n                                                    });\n                                                    return;\n                                                }\n                                            }\n                                            this.submitData()\n                                        }}>\n                                        Готово\n                                    </Button>\n                                    <Popper anchorEl={this.readyButton}\n                                            open={this.state.showError}\n                                            transition>\n                                        {({TransitionProps}) => (\n                                            <Fade {...TransitionProps} timeout={250}>\n                                                <Paper style={{backgroundColor: \"#ff9292\", padding: 12}}>\n                                                    <Typography>\n                                                        Все поля должны быть заполнены\n                                                    </Typography>\n                                                </Paper>\n                                            </Fade>\n                                        )}\n                                    </Popper>\n                                    {this.renderDirectionsSettings()}\n                                </StepContent>\n                            </Step>\n                        </Stepper>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__ = true;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}